#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
uniform layout(binding = 0, rgba32f) readonly image2D perlinNoise;
uniform layout(binding = 1, rgba32f) writeonly image2D normalMap;

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    ivec2 offsets[9] = ivec2[](
            ivec2(-1, 1), // top-left
            ivec2(0, 1), // top-center
            ivec2(1, 1), // top-right
            ivec2(-1, 0), // center-left
            ivec2(0, 0), // center-center
            ivec2(1, 0), // center-right
            ivec2(-1, -1), // bottom-left
            ivec2(0, -1), // bottom-center
            ivec2(1, -1) // bottom-right
        );

    float sampledData[9];
    for (int i = 0; i < 9; i++)
    {
        vec3 color = imageLoad(perlinNoise, texelCoord + offsets[i]).rgb;
        sampledData[i] = (color.r + color.g + color.b) / 3.0;
    }

    float gradientXKernel[9] = float[](
            1, 0, -1,
            2, 0, -2,
            1, 0, -1
        );

    float gradientYKernel[9] = float[](
            1, 2, 1,
            0, 0, 0,
            -1, -2, -1
        );

    vec3 gradient = vec3(0.0);
    for (int i = 0; i < 9; i++) {
        gradient.r += sampledData[i] * gradientXKernel[i];
        gradient.g += sampledData[i] * gradientYKernel[i];
    }
    gradient.b += sqrt(1.0 - dot(gradient.rg, gradient.rg));
    gradient *= 1 - step(127, texelCoord.x);
    gradient *= step(1, texelCoord.y);

    imageStore(normalMap, texelCoord, vec4(gradient, 1.0));
}
